{"version":3,"sources":["redux/actions/github/github_action_types.ts","layout/loading/Loading.tsx","serviceWorker.ts","layout/navbar/Navbar.tsx","layout/footer/Footer.tsx","layout/base/Base.tsx","layout/error/ErrorBoundary.tsx","redux/reducers/github/reducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["GITHUB_REPOS_GET","Loading","Component","Boolean","window","location","hostname","match","Navbar","className","to","target","href","Footer","Base","this","props","children","ErrorBoundary","state","hasError","error","info","console","reposGetStateInitialState","data","undefined","loading","reducer","combineReducers","github","action","type","START","FAIL","SUCCESS","store","createStore","composeWithDevTools","applyMiddleware","thunk","WebsiteRouter","lazy","App","fallback","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mGAAO,IAAKA,EAAZ,kC,SAAYA,O,iBAAAA,I,qBAAAA,I,gBAAAA,M,sFCENC,E,uKAEE,OACI,6C,GAHUC,aAQPD,O,yNCEKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDCaSC,G,6KApBP,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,qBAAqBC,GAAG,KAAxC,cAIJ,yBAAKD,UAAU,iBACX,uBAAGA,UAAU,uBAAuBE,OAAO,QAAQC,KAAK,gCACpD,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAMH,UAAU,uBAAuBC,GAAG,gBAA1C,yB,GAbCR,cCSNW,G,6KARP,OACI,4BAAQJ,UAAU,UAAlB,0B,GAHSP,cCkBNY,G,6KAdP,OACI,yBAAKL,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,aACVM,KAAKC,MAAMC,WAGpB,kBAAC,EAAD,W,GAVGf,c,QCqBJgB,E,kDApBX,WAAYF,GAA4B,IAAD,8BACnC,cAAMA,IACDG,MAAQ,CAAEC,UAAU,GAFU,E,8DASrBC,EAAcC,GAC5BC,QAAQF,MAAM,gCAAiCA,EAAOC,K,+BAGtD,OAAIP,KAAKI,MAAMC,SACJ,qDAEJL,KAAKC,MAAMC,Y,gDAXUI,GAE5B,OADAE,QAAQF,MAAM,gCAAiCA,GACxC,CAAED,UAAU,O,GARClB,a,+BCAfsB,EAA4C,CACrDC,UAAMC,EACNL,WAAOK,EACPC,SAAS,GCRAC,EAAUC,0BAAgB,CACnCC,ODUgC,WAAiG,IAAhGX,EAA+F,uDAAvEK,EAA2BO,EAA4C,uCAChI,OAAQA,EAAOC,MACX,KAAKhC,IAAiBiC,MAClB,MAAO,CACHR,UAAMC,EACNL,WAAOK,EACPC,SAAS,GAEjB,KAAK3B,IAAiBkC,KAClB,MAAO,CACHT,UAAMC,EACNL,MAAOU,EAAOV,MACdM,SAAS,GAEjB,KAAK3B,IAAiBmC,QAClB,MAAO,CACHV,KAAMM,EAAON,KACbJ,WAAOK,EACPC,SAAS,GAEjB,QACI,OAAOR,MCxBJiB,EAFDC,sBAAYT,EAASU,8BAAoBC,0BAAgBC,OCDjEC,EAAgBC,gBAAK,kBAAM,gCAkBlBC,EAhBC,WACZ,OACI,kBAAC,EAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC3C,EAAA,EAAD,OAChB,kBAAC,IAAD,CAAQ4C,SAAS,KACb,kBAAC,IAAD,CAAUT,MAAOA,GACb,kBAAC,EAAD,KACI,kBAACK,EAAD,Y,YCP5BK,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SR6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLE,QAAQF,MAAMA,EAAMoC,c","file":"static/js/main.33137d92.chunk.js","sourcesContent":["export enum GITHUB_REPOS_GET{\n    START,\n    SUCCESS,\n    FAIL\n}","import React, { Component } from \"react\"\n\nclass Loading extends Component {\n    render(){\n        return (\n            <p>Loading...</p>\n        )\n    }\n}\n\nexport default Loading\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Global Imports\nimport React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport {FaGithub} from \"react-icons/fa\"\n// Local Imports\n\n// Styles\nimport \"./sass/navbar.sass\"\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <header className=\"navbar\">\n                <div className=\"navbar__brand\">\n                    <Link className=\"navbar__brand_text\" to=\"/\">\n                        FQAlmeida\n                    </Link>\n                </div>\n                <div className=\"navbar__links\">\n                    <a className=\"navbar__links_anchor\" target=\"blank\" href=\"https://github.com/FQAlmeida\">\n                        <FaGithub />\n                    </a>\n                    <Link className=\"navbar__links_anchor\" to=\"repositories\">\n                        Reposit√≥rios\n                    </Link>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Navbar;\n","// Global Imports\nimport React, { Component } from \"react\"\n\n// Local Imports\n\n// Styles\nimport \"./sass/footer.sass\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                this is the footer\n            </footer>\n        )\n    }\n}\n\nexport default Footer;\n","// Global Imports\nimport React, { Component } from \"react\"\n\n// Local Imports\nimport Navbar from \"../navbar/Navbar\"\nimport Footer from \"../footer/Footer\"\n\n// Styles\nimport \"./sass/base.sass\"\n\nclass Base extends Component {\n    render() {\n        return (\n            <div className=\"base\">\n                <Navbar />\n                <div className=\"base__content\">\n                    <div className=\"container\">\n                        {this.props.children}\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default Base;\n","import React, { Component, ErrorInfo } from \"react\"\n\ninterface ErrorBoundaryProps {\n\n}\n\ninterface ErrorBoundaryState {\n    hasError: boolean\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    constructor(props: ErrorBoundaryProps) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error: Error) {    // Update state so the next render will show the fallback UI.    \n        console.error(\"ErrorBoundary caught an error\", error);\n        return { hasError: true };\n    }\n    componentDidCatch(error: Error, info: ErrorInfo) {    // You can also log the error to an error reporting service    \n        console.error(\"ErrorBoundary caught an error\", error, info);\n    }\n    render() {\n        if (this.state.hasError) {      // You can render any custom fallback UI      \n            return <h1>Something went wrong.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import { GITHUB_REPOS_GET } from \"../../actions/github/github_action_types\"\n\nimport { IGithubReposGet, IGithubReposGetData } from \"../../actions/github/get_respositories_types\"\n\nexport interface IReposGetState {\n    data?: IGithubReposGetData,\n    error?: Error,\n    loading: boolean\n}\n\nexport const reposGetStateInitialState: IReposGetState = {\n    data: undefined,\n    error: undefined,\n    loading: false\n};\n\nexport const github_repos_reducer = (state: IReposGetState = reposGetStateInitialState, action: IGithubReposGet): IReposGetState => {\n    switch (action.type) {\n        case GITHUB_REPOS_GET.START:\n            return {\n                data: undefined,\n                error: undefined,\n                loading: true\n            };\n        case GITHUB_REPOS_GET.FAIL:\n            return {\n                data: undefined,\n                error: action.error,\n                loading: false\n            }\n        case GITHUB_REPOS_GET.SUCCESS:\n            return {\n                data: action.data,\n                error: undefined,\n                loading: false\n            }\n        default:\n            return state;\n    }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { github_repos_reducer } from \"./reducers/github/reducer\";\n\nexport const reducer = combineReducers({\n    github: github_repos_reducer\n});\n\nexport type rootState = ReturnType<typeof reducer>\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","// Global Imports\nimport React, { FC, lazy, Suspense } from \"react\"\nimport { HashRouter as Router } from \"react-router-dom\"\nimport { Provider } from \"react-redux\";\n// Local Imports\nimport Base from \"./layout/base/Base\"\nimport Loading from \"./layout/loading/Loading\"\nimport Error from \"./layout/error/ErrorBoundary\";\nimport store from \"./redux/store\"\n\nconst WebsiteRouter = lazy(() => import(\"./routes/router\"))\n\nconst App: FC = () => {\n    return (\n        <Error>\n            <Suspense fallback={<Loading />}>\n                <Router basename=\"/\">\n                    <Provider store={store}>\n                        <Base>\n                            <WebsiteRouter />\n                        </Base>\n                    </Provider>\n                </Router>\n            </Suspense>\n        </Error>\n    )\n}\n\nexport default App","// Global Imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Local Imports\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n// Global Style\nimport \"./global/sass/color.sass\"\nimport \"./global/sass/style.sass\"\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}