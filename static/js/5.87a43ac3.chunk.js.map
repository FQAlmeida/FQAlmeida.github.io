{"version":3,"sources":["redux/actions/github/client.ts","redux/actions/github/get_repositories.ts","components/repository/Repository.tsx"],"names":["client","axios","create","baseURL","responseType","headers","reposGetSuccess","data","type","GITHUB_REPOS_GET","SUCCESS","error","undefined","reposGetFail","FAIL","connector","connect","state","loading","github","repositories","dispatch","getRepositories","a","START","owner","process","Error","github_client","get","then","resp","map","repo","created_at","Date","pushed_at","updated_at","console","log","catch","err","Repositories","this","props","Component"],"mappings":"2MAWeA,E,OATAC,EAAMC,OAAO,CACxBC,QAAS,yBACTC,aAAc,OACdC,QAAS,CACL,OAAU,iCACV,eAAgB,sB,QCSXC,EAAkB,SAACC,GAC5B,MAAO,CACHC,KAAMC,IAAiBC,QACvBH,KAAMA,EACNI,WAAOC,IAIFC,EAAe,SAACF,GACzB,MAAO,CACHH,KAAMC,IAAiBK,KACvBH,MAAOA,EACPJ,UAAMK,ICWRG,EAAYC,aAhBM,SAACC,GACrB,MAAO,CACHC,QAASD,EAAME,OAAOD,QACtBP,MAAOM,EAAME,OAAOR,MACpBS,aAAcH,EAAME,OAAOZ,SAIR,SAACc,GACxB,MAAO,CACHC,gBAAiB,WACb,OAAOD,EDCf,uCAAO,WAAMA,GAAN,eAAAE,EAAA,yDACHF,EA3BG,CACHb,KAAMC,IAAiBe,MACvBjB,UAAMK,EACND,WAAOC,IAyBDa,EAAQC,YAFX,gBAICL,EAASR,EAAa,IAAIc,MAAM,cAJjC,sCAMOC,EAAcC,IAAd,iBAAiDJ,EAAjD,WAAgEK,MAClE,SAAAC,GACI,IAAMxB,EAA4BwB,EAAKxB,KAAKyB,KAAI,SAAAC,GAC5C,OAAO,eACAA,EADP,CAEIC,WAAY,IAAIC,KAAKF,EAAKC,YAC1BE,UAAW,IAAID,KAAKF,EAAKG,WACzBC,WAAY,IAAIF,KAAKF,EAAKI,iBAGlCC,QAAQC,IAAIhC,GAEZc,EAASf,EAAgBC,OAE/BiC,OAAM,SAAAC,GACJpB,EAASR,EAAa4B,OArB3B,2CAAP,4DCeEC,E,kLAEEC,KAAKC,MAAMtB,oB,+BAGX,OACI,wC,GANeuB,aAWZ9B,YAAU2B","file":"static/js/5.87a43ac3.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst client = axios.create({\n    baseURL: \"https://api.github.com\",\n    responseType: \"json\",\n    headers: {\n        \"Accept\": \"application/vnd.github.v3+json\",\n        \"Content-Type\": \"application/json\",\n    }\n})\n\nexport default client;\n","// Global Imports\nimport { ThunkAction } from \"redux-thunk\";\n// Local Imports\nimport { rootState } from \"../../store\";\nimport github_client from \"./client\";\nimport { IGithubReposGet, IGithubReposGetData, IReposData } from \"./get_respositories_types\";\nimport { GITHUB_REPOS_GET } from \"./github_action_types\";\n\nexport const reposGetStart = (): IGithubReposGet => {\n    return {\n        type: GITHUB_REPOS_GET.START,\n        data: undefined,\n        error: undefined\n    };\n};\n\nexport const reposGetSuccess = (data: Array<IReposData>): IGithubReposGet => {\n    return {\n        type: GITHUB_REPOS_GET.SUCCESS,\n        data: data,\n        error: undefined\n    };\n};\n\nexport const reposGetFail = (error: Error): IGithubReposGet => {\n    return {\n        type: GITHUB_REPOS_GET.FAIL,\n        error: error,\n        data: undefined\n    };\n};\n\n\n\nexport const getPublicRepositories = (): ThunkAction<Promise<void>, rootState, unknown, IGithubReposGet> => {\n    return async dispatch => {\n        dispatch(reposGetStart());\n        const owner = process.env.REACT_APP_GITHUB_ACCOUNT;\n        if (!owner) {\n            dispatch(reposGetFail(new Error(\"No owner\")))\n        } else {\n            await github_client.get<IGithubReposGetData>(`/users/${owner}/repos`).then(\n                resp => {\n                    const data: IGithubReposGetData = resp.data.map(repo => {\n                        return {\n                            ...repo,\n                            created_at: new Date(repo.created_at),\n                            pushed_at: new Date(repo.pushed_at),\n                            updated_at: new Date(repo.updated_at)\n                        }\n                    });\n                    console.log(data);\n\n                    dispatch(reposGetSuccess(data));\n                }\n            ).catch(err => {\n                dispatch(reposGetFail(err));\n            });\n        }\n    };\n};","// Global Imports\nimport React, { Component } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n// Local Imports\nimport { rootState } from \"../../redux/store\";\nimport { IGithubReposGet, IGithubReposGetData } from \"../../redux/actions/github/get_respositories_types\";\nimport { getPublicRepositories } from \"../../redux/actions/github/get_repositories\";\n\n\ninterface IRepositoryState { }\n\ninterface IRepositoryProps { }\n\ninterface IRepositoryStateProps { \n    loading: boolean\n    error?: Error\n    repositories?: IGithubReposGetData\n}\ninterface IRepositoryDispatchProps {\n    getRepositories: () => Promise<void>\n }\n\nconst mapStateToProps = (state: rootState): IRepositoryStateProps => {\n    return {\n        loading: state.github.loading,\n        error: state.github.error,\n        repositories: state.github.data\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<rootState, undefined, IGithubReposGet>): IRepositoryDispatchProps => {\n    return {\n        getRepositories: () => {\n            return dispatch(getPublicRepositories())\n        }\n    }\n}\n\nconst connector = connect<\n    IRepositoryStateProps,\n    IRepositoryDispatchProps,\n    IRepositoryProps,\n    rootState>\n    (mapStateToProps, mapDispatchToProps);\n\n    type PropsFromRedux = ConnectedProps<typeof connector>\n\ntype RepositoryProps = PropsFromRedux & IRepositoryProps\n\nclass Repositories extends Component<RepositoryProps, IRepositoryState> {\n    componentDidMount(){\n        this.props.getRepositories();\n    }\n    render() {\n        return (\n            <p>repos</p>\n        )\n    }\n}\n\nexport default connector(Repositories);\n"],"sourceRoot":""}