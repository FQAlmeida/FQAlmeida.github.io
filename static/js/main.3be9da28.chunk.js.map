{"version":3,"sources":["serviceWorker.ts","components/home/Home.tsx","components/repository/Repository.tsx","router/router.tsx","router/router_configs.ts","layout/navbar/Navbar.tsx","layout/footer/Footer.tsx","layout/base/Base.tsx","graphql/client.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Home","role","aria-label","Component","repo_query","Repositories","query","loading","error","data","viewer","repositories","nodes","map","repo","index","createdAt","Date","key","name","toLocaleString","WebsiteRouter","path","exact","component","history","createBrowserHistory","Navbar","to","Footer","Base","this","props","children","client","ApolloClient","uri","cache","InMemoryCache","headers","process","REACT_APP_GITHUB_KEY","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCLSC,E,uKARP,OACI,uEAC6C,0BAAMC,KAAK,MAAMC,aAAW,eAA5B,qB,GAJtCC,a,gBCEbC,EAAU,0vEA8DDC,E,uKAxBP,OACI,kBAAC,QAAD,CAAwBC,MAAOF,IAC1B,YAA+B,IAA5BG,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAChB,OAAIF,EAAkB,sCACbE,EACE,kBAAC,WAAD,YACFA,QADE,IACFA,OADE,EACFA,EAAMC,OAAOC,aAAaC,MAAMC,KAAI,SAACC,EAAMC,GAExC,OADAD,EAAI,eAAQA,EAAR,CAAcE,UAAW,IAAIC,KAAKH,EAAKE,aAEvC,yBAAKE,IAAKH,GACN,2BAAID,EAAKK,MACT,6CAAmBL,EAAKE,UAAUI,uBAM/C,2BAAIZ,U,GAnBJL,aCvBZkB,E,uKATP,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,gBAAgBC,OAAK,EAACC,UAAWnB,S,GALjCF,a,QCLfsB,EAAUC,c,QCkBRC,G,6KAVP,OACI,gCACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,a,GAJKzB,cCUN0B,G,6KARP,OACI,0D,GAHS1B,cCcN2B,G,6KAVP,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACCC,KAAKC,MAAMC,SACZ,kBAAC,EAAD,W,GANG9B,cCAJ+B,EARA,IAAIC,eAAa,CAC5BC,IAAK,iCACLC,MAAO,IAAIC,gBACXC,QAAQ,CACJ,cAAgB,SAAhB,OAA0BC,wJAAYC,yBCMxCC,EAAU,WACd,OACE,kBAAC,iBAAD,CAAgBR,OAAQA,GACtB,kBAAC,IAAD,CAAQT,QAASA,GACf,kBAAC,EAAD,KACE,kBAAC,EAAD,UAOVkB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,STiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.3be9da28.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Global Imports\nimport React, { Component } from \"react\"\n\nclass Home extends Component {\n    render(){\n        return (\n            <p>\n                This is Home, & it is under construction <span role=\"img\" aria-label=\"work wrench\">ðŸ”§</span>\n            </p>\n        )\n    }\n}\n\nexport default Home;\n","// Global Imports\nimport React, { Component, Fragment } from \"react\";\nimport { loader } from \"graphql.macro\"\nimport { Query } from \"@apollo/client/react/components\"\n\nconst repo_query = loader(\"../../graphql/queries/repositories.gql\")\n\ninterface RepositoryState { }\n\ninterface RepositoryProps { }\n\ninterface Language {\n    name: string\n}\n\ninterface PageInfo {\n    endCursor: string,\n    hasNextPage: boolean\n}\n\ninterface Repository {\n    name: string\n    createdAt: Date\n    owner: {\n        login: string\n    }\n    description: string\n    languages: { nodes: Array<Language> }\n}\n\ninterface Data {\n    viewer: {\n        repositories: {\n            totalCount: number\n            nodes: Array<Repository>\n            pageInfo: PageInfo\n        }\n    }\n}\n\n\nclass Repositories extends Component<RepositoryProps, RepositoryState> {\n    render() {\n        return (\n            <Query<Data, undefined> query={repo_query}>\n                {({ loading, error, data }) => {\n                    if (loading) { return <p>loading</p> }\n                    else if (data) {\n                        return <Fragment>\n                            {data?.viewer.repositories.nodes.map((repo, index) => {\n                                repo = { ...repo, createdAt: new Date(repo.createdAt) }\n                                return (\n                                    <div key={index}>\n                                        <p>{repo.name}</p>\n                                        <span>Created At: {repo.createdAt.toLocaleString()}</span>\n                                    </div>\n                                )\n                            })}\n                        </Fragment>\n                    }\n                    return <p>{error}</p>\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default Repositories;\n","// Global Imports\nimport React, { Component, Fragment } from \"react\"\nimport { Route } from \"react-router\"\n// Local Imports\nimport Home from \"../components/home/Home\"\nimport Repositories from \"../components/repository/Repository\"\n\nclass WebsiteRouter extends Component {\n    render() {\n        return (\n            <Fragment>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/repositories\" exact component={Repositories} />\n            </Fragment>\n        )\n    }\n}\n\nexport default WebsiteRouter;\n","import { createBrowserHistory } from \"history\"\n\nexport const history = createBrowserHistory();\n","// Global Imports\nimport React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\n// Local Imports\n\n// Styles\nimport \"./sass/navbar.sass\"\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <header>\n                <Link to=\"/\">\n                    Home\n                </Link>\n            </header>\n        )\n    }\n}\n\nexport default Navbar;\n","// Global Imports\nimport React, { Component } from \"react\"\n\n// Local Imports\n\n// Styles\nimport \"./sass/footer.sass\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                this is the footer\n            </footer>\n        )\n    }\n}\n\nexport default Footer;\n","// Global Imports\nimport React, { Component, Fragment } from \"react\"\n\n// Local Imports\nimport Navbar from \"../navbar/Navbar\"\nimport Footer from \"../footer/Footer\"\n\n// Styles\nimport \"./sass/base.sass\"\n\nclass Base extends Component {\n    render() {\n        return (\n            <Fragment>\n                <Navbar />\n                {this.props.children}\n                <Footer />\n            </Fragment>\n        )\n    }\n}\n\nexport default Base;\n","import { ApolloClient, InMemoryCache} from \"@apollo/client\"\n\nconst client = new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n    cache: new InMemoryCache(),\n    headers:{\n        \"Authorization\": `Token ${process.env.REACT_APP_GITHUB_KEY}`\n    }\n})\n\nexport default client;\n","// Global Imports\nimport React, { FC } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport { ApolloProvider } from \"@apollo/client\"\n// Local Imports\nimport * as serviceWorker from './serviceWorker';\nimport WebsiteRouter from './router/router';\nimport { history } from './router/router_configs';\nimport Base from './layout/base/Base';\nimport client from './graphql/client';\n\nconst App: FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Router history={history}>\n        <Base>\n          <WebsiteRouter />\n        </Base>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}